Option Explicit

Dim toolBitmap		// holds the toolbar bitmap
dim bmpX        = 600
dim bmpY        = 600
dim halfX = bmpX/2
dim halfY = bmpY/2
dim boneAngle[100]
dim boneLength[100]
dim boneEndX[100]
dim boneEndY[100]
dim boneParent[100]
dim boneIsHinge[100]
dim boneId[100]

dim boneCount = 0
dim mode = 0
dim pickedBone = -1
const boneClose = 6

const PickBoneMode = 0
const AddBoneMode = 1
const NewBoneMode = 2
const MoveBoneMode = 3
const RotateBoneMode = 4

const PoseButton = 0
const BoneButton = 1
const AddButton = 2
const MoveButton = 3
const RotateButton = 4

Dim ID_TOOLBAR      = wxID_HIGHEST + 1
Dim ID_SPLITTER      = wxID_HIGHEST + 2


Dim frame as wxFrame = new wxFrame(Nothing, 1, "FK Tester", wxPoint(-1, -1), wxSize(640, 480))
Dim splitter as wxSplitterWindow = new wxSplitterWindow(frame, ID_SPLITTER, wxPoint(-1,  -1), wxSize(-1, -1), wxSP_BORDER)
dim Tool as wxWindow = new wxWindow(frame, ID_TOOLBAR, wxPoint(-1, -1), wxSize(640, 25))


// create a status bar
frame.CreateStatusBar(2)
frame.SetStatusText("FK Test Program")

Dim mFile = New wxMenu()
    mFile.Append( wxID_NEW, "&New", "Erase the current drawing")
    mFile.AppendSeparator()
    mFile.Append( wxID_EXIT, "E&xit\tAlt-X", "Quit this program")

Dim mHelp = New wxMenu()
    mHelp.Append( wxID_ABOUT, "&About...\tCtrl-A", "Show \"About\" dialog")

' create a menubar for the menus
Dim menuBar = New wxMenuBar()
    menuBar.Append(mFile,   "&File")
    menuBar.Append(mHelp,   "&Help")

' attach the menubar to the frame
frame.SetMenuBar(menuBar)





' create a bitmap for double buffering
dim bmp = wxEmptyBitmap( bmpX, bmpY )

' create a store for the graphic
dim bmpDC = wxMemoryDC()
bmpDC.SelectObject( bmp )
bmpDC.Clear()

' create pens
Const   Red     = wxPenFromColorName( "Red", 3, wxSOLID ),
        Orange  = wxPenFromColorName( "Orange", 3, wxSOLID ),
        Yellow  = wxPenFromColorName( "Yellow", 3, wxSOLID ),
        Green   = wxPenFromColorName( "Green", 3, wxSOLID ),
        Blue    = wxPenFromColorName( "Blue", 3, wxSOLID ),
        Purple  = wxPenFromColorName( "Purple", 3, wxSOLID ),
        Black   = wxPenFromColorName( "Black", 3, wxSOLID ),
        White   = wxPenFromColorName( "White", 3, wxSOLID )


' set the pen color
bmpDC.SetPen( Black )

dim mouseIsDown = false

function screenToX( x )
	// convert to axis
	return x - halfX
end function

function screenToY( y )
	// convert to axis
	return halfY - y
end function


function hitBone( x, y )
	' return index of bone if hit
	dim i

	for i = 1 to boneCount
		if (boneEndX[i]-boneClose < x) and (boneEndX[i]+boneClose > x) and 
			(boneEndY[i]-boneClose < y) and (boneEndY[i]+boneClose > y) then
			return i
		end if
	next
	return 0
end function


sub onMouse( event )

    ' This could have been split up into three seperate event
    ' handlers, but this let me test the CASE statement

	static lastMouseX, lastMouseY
	if lastMouseX = nothing then lastMouseX = 0
	if lastMouseY = nothing then lastMouseY = 0

    ' get event information
    dim mouseX = event.GetX()
    dim mouseY = event.GetY()
    dim eventType = event.GetEventType()

	' convert to cartesian coordinates
	dim cartesianX = screenToX( mouseX )
	dim cartesianY = screenToY( mouseY )


    ' what type of event?
    Select Case eventType
    Case wxEVT_LEFT_UP

        If mouseIsDown Then
            // frame.ReleaseMouse()
            mouseIsDown = false
			mode = PickBoneMode
            updateScreen()
        End If

    Case wxEVT_LEFT_DOWN
		mouseIsDown = true
		select case mode
		case PickBoneMode
			pickedBone = hitBone( cartesianX, cartesianY )
			updateScreen()

		case AddBoneMode
			If !mouseIsDown Then
				// add bone mode?
				if mode = AddBoneMode then
					mouseIsDown = true
					mode = NewBoneMode
					// frame.captureMouse()
					boneCount += 1
					pickedBone = boneCount
					boneParent[boneCount] = pickedBone
					boneLength[pickedBone] = 10
					boneAngle[pickedBone] = 0
				
					lastMouseX = mouseX
					lastMouseY = mouseY
		
					updateScreen()
				end if
			End If
		end select

    Case wxEVT_MOTION
        If mouseIsDown Then
			if mode = PickBoneMode and pickedBone > 0 then
				' adjust picked bone to new location
				recalcBone( pickedBone, cartesianX, cartesianY )
				updateScreen()

			elsif mode = RotateBoneMode and pickedBone > 0 then
				dim parentIndex = boneParent[ pickedBone ]
				' calculate new angle, subtract prior angle
				dim angle = calcAngle( boneEndX[ parentIndex ], boneEndY[ parentIndex ], cartesianX, cartesianY )
				angle -= sumBoneAngles( parentIndex )
				boneAngle[ pickedBone ] = angle
				updateScreen()

			end if

            lastMouseX = mouseX
            lastMouseY = mouseY
        End If

    End Select

End sub

' attach callbacks
Connect( frame, -1, wxEVT_LEFT_DOWN, "onMouse" )
Connect( frame, -1, wxEVT_LEFT_UP,   "onMouse" )
Connect( frame, -1, wxEVT_MOTION,    "onMouse" )

function calcAngle( x1, y1, x2, y2 )

	' convert into a vector
	dim x = x2 - x1
	dim y = y2 - y1

	' calculate length of vector
	dim l = sqr( x*x + y*y )

	' calculate absolute angle
	dim angle = acos( y / l )
	if (x > 0) then
		angle = -angle
	end if

	return angle

end function

function sumBoneAngles( boneIndex )
	' accumulate this and all prior angles
	dim sumAngle = 0
	while boneIndex > 0
		' add this bone's angle
		sumAngle += boneAngle[ boneIndex ]
		' get the parent of this bone
		boneIndex = boneParent[ boneIndex ]
	end while
	return sumAngle
end function

sub recalcBone( boneIndex, x, y )
	' given a new x, y, recalculate the bone

	' get the index of the parent
	dim parentIndex = boneParent[ boneIndex ]

	' convert into a vector
	x = x - boneEndX[ parentIndex ]
	y = y - boneEndY[ parentIndex ]

	' calculate length of vector
	dim newLength = sqr( x*x + y*y )

	' calculate absolute angle
	dim angle = acos( y / newLength )
	if (x > 0) then
		angle = -angle
	end if

	' subtract prior angle to get relative angle
	angle -= sumBoneAngles( parentIndex )

	' set new values
	boneAngle[ boneIndex ] = angle
	boneLength[ boneIndex ] = newLength


end sub

sub recalcChildren( boneIndex, angle )
	dim i

	' don't do root
	if boneIndex > 0 then
		' get the parent
		dim parent = boneParent[ boneIndex ]
	
		' use the end of the parent as the start
		dim startX = boneEndX[ parent ]
		dim startY = boneEndY[ parent ]
	
		' calculate the cumulative rotation
		angle += boneAngle[ boneIndex ]
	
		' calculate end of bone
		dim myLen = boneLength[ boneIndex ]
	
		' calculate end point on unit circle
		dim endX = -sin( angle )
		dim endY = cos( angle )
	
		' scale by the bone length
		endX *= myLen
		endY *= myLen
	
		' offset by parent's start position
		endX += startX
		endY += startY
	
		' update end position
		boneEndX[ boneIndex ] = endX
		boneEndY[ boneIndex ] = endY
	end if

	// find all children of this bone
	for i = 1 to boneCount
		if boneParent[i] = boneIndex then
			// recurse
			recalcChildren( i, angle )
		end if
	end for

end sub


Sub drawLine( x1, y1, x2, y2 )
	// convert to screen coordiantes and draw
	bmpDc.DrawLine( x1 + halfX, halfY-y1, x2+halfX, halfY-y2 )
End Sub

sub drawRectangle( x1, y1, wide, high )
	bmpDc.DrawRectangle( x1 + halfX, halfY-y1, wide, high )
end sub

sub drawBones()
	dim i, startX, startY, parent
	
	' draw lines for the bones
	for i = 1 to boneCount
		if i = pickedBone then
			bmpDC.SetPen( Red )
		else
			bmpDC.SetPen( Purple )
		end if

		' get index of parent
		parent = boneParent[ i ]

		' start of bone is end of parent
		startX = boneEndX[ parent ]
		startY = boneEndY[ parent ]

		' draw a line for the bone
		drawLine( startX, startY, boneEndX[i], boneEndY[i] )
	next

	' draw the end points of the bones
	bmpDC.SetPen( Red )

	' draw the root
	drawRectangle( boneEndX[ 0 ]-2, boneEndY[ 0 ]+2, 4, 4 )	

	' draw the children
	for i = 1 to boneCount
		if i = pickedBone then
			bmpDC.SetPen( Red )
		else
			bmpDC.SetPen( Black )
		end if

		' draw a target around the bone end
		drawRectangle( boneEndX[i]-2, boneEndY[i]+2, 4, 4 )
	next

end sub

Sub updateScreen()
	// erase the prior drawing
	bmpDC.Clear()

	// draw an axis
	bmpDC.SetPen( Green )
	drawLine( 0, -halfY, 0, halfY )
	drawLine( -halfY, 0, halfX, 0 )

	' recalculate bones, starting from the root
	recalcChildren( 0, 0 )
	drawBones()

    dim dc = wxClientDC( frame )
    dc.BeginDrawing()
    dc.Blit( 0, 0, bmpX, bmpY, bmpDC, 0, 0 )
    dc.EndDrawing()

End Sub

Sub onPaint( event )
    ' get the DC of the frame
    dim dc = wxPaintDC( frame )
    dc.BeginDrawing()

    ' blit the bitmap
    dc.Blit( 0, 0, bmpX, bmpY, bmpDC, 0, 0 )

    dc.EndDrawing()

End Sub
Connect( frame, -1, wxEVT_PAINT, "onPaint" )


// set the toolbar
Function setToolBar()
	// create a bitmap to hold the tools
	dim tools = new wxEmptyBitmap(0, 0)
	
	// create a memory context 
    dim toolsDC = wxMemoryDC()
	
	// create a bitmap to hold the tools
	// FIXME: should this get the size of the tools from the graphic?
    dim tBitmap = new wxEmptyBitmap(600, 96)
	
	dim tDC = wxMemoryDC()
	
	// try to load the file
	If !tools.LoadFile("am_toolbar.gif", wxBITMAP_TYPE_GIF) then		
		wxMessageBox("Cannot load Toolbar - Bitmap!\nEnding Program.")
		End
	End If

	// select the toolbar into the toolbar device context
	toolsDC.SelectObject(tools)  

	tDC.SelectObject( tBitmap )
	tDC.SetBackground(new wxBrush(Tool.GetBackgroundColour(), wxTRANSPARENT))
	tDC.Clear()
	tDC.BeginDrawing()
	// copy all the tools into the toolbar
	tDC.Blit( 0, 0, 600, 96, toolsDC, 0, 0, wxCOPY, 1)
	tDC.EndDrawing()
	return tDC
End Function

'Set Toolbar-Buttons
Sub onToolBarEvent( event )

	static priorIndex	
	dim hintText = ""

	if priorIndex = Nothing then priorIndex = -1

	// get the type of event
	dim eventType = event.GetEventType()

	// divide by width of icons to get icon index
	dim index = fix(event.GetX() / 24)

	// leaving window or past last toolbar button?
	If eventType = wxEVT_LEAVE_WINDOW or index > 24 then
		index = - 1		
	End If

	dim dc = wxClientDC(Tool)
 
	If priorIndex >= 0 and index != priorIndex and eventType != - 1 then
		dc.BeginDrawing()
		dc.Blit( priorIndex * 24, 0, 24, 24, toolBitmap, priorIndex * 24, 0)
		dc.EndDrawing()
	End If
   
	If (eventType = wxEVT_MOTION and index != priorIndex) or eventType = wxEVT_LEFT_UP then
		dc.BeginDrawing()
		dc.Blit( index * 24, 0, 24, 24, toolBitmap, index * 24, 24)
		dc.EndDrawing()

	ElseIf eventType = wxEVT_LEFT_DOWN then
		dc.BeginDrawing()
		dc.Blit( index * 24, 0, 24, 24, toolBitmap, index * 24, 48)
		dc.EndDrawing()
	End If

	Select case eventType
	case wxEVT_LEFT_DOWN
		// perform action here
        select case index
        case PoseButton
            frame.SetStatusText("Pose Mode")
        case BoneButton
            frame.SetStatusText("Edit Bones Mode")
		case AddButton
			' use root if nothing picked
			if pickedBone < 1 then
				pickedBone = 0
			end if

			' attach a bone to the root
			boneCount += 1
			boneParent[boneCount] = pickedBone
			boneAngle[boneCount] = 0
			boneLength[boneCount] = 10
			pickedBone = boneCount
			updateScreen()

		case RotateButton
			if pickedBone > 0 then
				frame.SetStatusText("Rotate Bone Mode")
				mode = RotateBoneMode
			end if
        end select
        


	case wxEVT_MOTION
		If index != priorIndex then
			// pick hints
			hintText = "this is hint for #" & index
		End If

	End Select

	Tool.SetToolTip(hintText)

	' save the index
	priorIndex = index

End Sub

Connect( Tool, -1, wxEVT_LEFT_DOWN, "onToolBarEvent")
Connect( Tool, -1, wxEVT_LEFT_UP, "onToolBarEvent")
Connect( Tool, -1, wxEVT_MOTION, "onToolBarEvent")
Connect( Tool, -1, wxEVT_LEAVE_WINDOW, "onToolBarEvent")

// set the toolbar
toolBitmap = setToolBar()


// Paint the ToolBar
Sub paintToolBar(event)
	dim toolBarDC = wxPaintDC( Tool )
	toolBarDC.BeginDrawing()
	toolBarDC.Blit( 0, 0, 600, 24, toolBitmap, 0, 0)
	toolBarDC.EndDrawing()	
End Sub
Connect( Tool, -1, wxEVT_PAINT, "paintToolBar" )

' callback for the Exit menu option
Sub OnQuit( event )
    frame.Close(True)
End Sub
Connect( frame, wxID_EXIT, wxEVT_COMMAND_MENU_SELECTED, "OnQuit" )

' callback for the About menu option
Sub OnAbout( event )
    Dim msg = "Simple IK Test\n" &
    "Written by David Cuny"
    wxMessageBox( msg, "About IK Test Program", wxOK + wxICON_INFORMATION, frame )
End Sub
Connect( frame, wxID_ABOUT, wxEVT_COMMAND_MENU_SELECTED, "OnAbout" )

function toRadians( degrees )
	return degrees * ( 3.141592653589793238 / 180 )
end function

' set the root
boneCount = 0
boneParent[0] = 0
boneAngle[0] = 0
boneLength[0] = 0

' attach a bone to the root
boneCount = 1
boneParent[1] = 0
boneAngle[1] = toRadians( 0 )
boneLength[1] = 10

recalcChildren( 0, 0 )

updateScreen()
